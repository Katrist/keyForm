[{"title":"Installation","type":0,"sectionRef":"#","url":"/keyForm/docs/installation","content":"","keywords":""},{"title":"Through Wally [Recommended]​","type":1,"pageTitle":"Installation","url":"/keyForm/docs/installation#through-wally-recommended","content":"If you're using Wally, you can simply drop this snippet in, except replace latest with the latest keyForm version. wally.toml [dependencies] keyForm = &quot;ffrostflame/keyform@latest&quot;  "},{"title":"keyForm","type":0,"sectionRef":"#","url":"/keyForm/api/keyForm","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"keyForm","url":"/keyForm/api/keyForm#functions","content":" "},{"title":"createStore​","type":1,"pageTitle":"keyForm","url":"/keyForm/api/keyForm#createStore","content":"&lt;/&gt; keyForm.createStore( name: string, template: {[key: string]: any} ) → () Creates a new store instance. This is the main entry point for the library. The &quot;name&quot; parameter is used to identify the store in the Roblox data store. The &quot;template&quot; parameter is used to define the default values for the store, which will be reconciled when the player joins. local keyForm = require(path.to.keyForm) local store = keyForm.createStore(&quot;storeName&quot;, { foo = &quot;bar&quot;, })   "},{"title":"showTrace​","type":1,"pageTitle":"keyForm","url":"/keyForm/api/keyForm#showTrace","content":"&lt;/&gt; keyForm.showTrace() → () Enables verbose logging to the output window. This is useful for debugging. local keyForm = require(path.to.keyForm) keyForm.showTrace()  "},{"title":"Intro","type":0,"sectionRef":"#","url":"/keyForm/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Intro","url":"/keyForm/docs/intro#features","content":"Session lockingDataStore budget managementImmutableBuilt-in error handling: You don't have to care about datastore errors! "},{"title":"key","type":0,"sectionRef":"#","url":"/keyForm/api/key","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"key","url":"/keyForm/api/key#functions","content":" "},{"title":"read​","type":1,"pageTitle":"key","url":"/keyForm/api/key#read","content":"&lt;/&gt; key:read() → data Returns the current data for the key. Not editable, doesn't update data. local keyForm = require(path.to.keyForm) local store = keyForm.createStore(&quot;storeName&quot;, { foo = &quot;bar&quot;, }) local myKey = store:loadKey(&quot;keyName&quot;) print(myKey:read()) -- Prints the current data for the key   "},{"title":"lockAsync​","type":1,"pageTitle":"key","url":"/keyForm/api/key#lockAsync","content":"&lt;/&gt; key:lockAsync() → statusboolean Locks the key. This prevents other servers from interacting with the key. This function is asynchronous.  "},{"title":"unlockAsync​","type":1,"pageTitle":"key","url":"/keyForm/api/key#unlockAsync","content":"&lt;/&gt; key:unlockAsync() → () Unlocks the key. This allows other servers to interact with the key again. "},{"title":"Example Setup","type":0,"sectionRef":"#","url":"/keyForm/docs/example","content":"Example Setup local Players = game:GetService(&quot;Players&quot;) local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local keyForm = require(path.to.keyForm) local playerDataStore = keyForm.createStore(&quot;Store1&quot;, { secondsPlayed = 1, }) local incrementSecondsPlayed = playerDataStore:createTransform(function(data, amount) data.secondsPlayed += amount return data end) local keys = {} Players.PlayerAdded:Connect(function(player) local key = playerDataStore:loadKey(`player_{player.UserId}`) keys[player] = key local successfulLock = key:lockAsync() if successfulLock then -- Every 1 second, increment the seconds played by 1 while player:IsDescendantOf(game) do incrementSecondsPlayed(key, 5) task.wait(1) end else player:Kick(&quot;session locked&quot;) end end) Players.PlayerRemoving:Connect(function(player) if keys[player] then keys[player]:unlock() keys[player]:remove() end end) ","keywords":""},{"title":"store","type":0,"sectionRef":"#","url":"/keyForm/api/store","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"store","url":"/keyForm/api/store#functions","content":" "},{"title":"loadKey​","type":1,"pageTitle":"store","url":"/keyForm/api/store#loadKey","content":"&lt;/&gt; store:loadKey(keyName: string) → keykey Loads a key from the store. This is used to interact with the store's data. The &quot;keyName&quot; parameter is used to identify the key in the store. local keyForm = require(path.to.keyForm) local store = keyForm.createStore(&quot;storeName&quot;, { foo = &quot;bar&quot;, }) local key = store:loadKey(&quot;keyName&quot;) -- Loads the key &quot;keyName&quot; from the store &quot;storeName&quot;   "},{"title":"createTransform​","type":1,"pageTitle":"store","url":"/keyForm/api/store#createTransform","content":"&lt;/&gt; store:createTransform(callback: ( data: T, ...any ) → T) → transformFunction( key, ...any ) → () Creates a new transform function. This is used to update the store's data. The &quot;transformFunction&quot; parameter is a function that takes the current data and any number of additional parameters. Transforms should always return the new data. This function is synchronous. local keyForm = require(path.to.keyForm) local store = keyForm.createStore(&quot;storeName&quot;, { foo = &quot;bar&quot;, }) local transform = store:createTransform(function(data, newValue) data.foo = newValue return data end)   "},{"title":"createAsyncTransform​","type":1,"pageTitle":"store","url":"/keyForm/api/store#createAsyncTransform","content":"&lt;/&gt; store:createAsyncTransform(callback: ( data: T, ...any ) → T) → transformFunction( key, ...any ) → () An async version of createTransform. "}]